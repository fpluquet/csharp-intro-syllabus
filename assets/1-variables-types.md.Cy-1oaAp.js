import{_ as i,c as e,o as a,a2 as t}from"./chunks/framework.D2LT7fmo.js";const c=JSON.parse('{"title":"Les variables et types de données","description":"","frontmatter":{},"headers":[],"relativePath":"1-variables-types.md","filePath":"1-variables-types.md","lastUpdated":1757832983000}'),n={name:"1-variables-types.md"};function l(r,s,d,h,p,o){return a(),e("div",null,[...s[0]||(s[0]=[t(`<h1 id="les-variables-et-types-de-donnees" tabindex="-1">Les variables et types de données <a class="header-anchor" href="#les-variables-et-types-de-donnees" aria-label="Permalink to &quot;Les variables et types de données&quot;">​</a></h1><h2 id="les-variables-de-type-valeur" tabindex="-1">Les variables de type valeur <a class="header-anchor" href="#les-variables-de-type-valeur" aria-label="Permalink to &quot;Les variables de type valeur&quot;">​</a></h2><ul><li>Une <strong>variable</strong> est une mémoire qui stocke une valeur qui peut être modifiée.</li><li>La <strong>déclaration</strong> d&#39;une variable est sa création, <strong>l&#39;assignation</strong> est donner une valeur à une variable.</li><li>Les <strong>variables de type valeur</strong> contiennent des données simples et contiennent directement leurs valeurs.</li><li>Types valeur : <code>sbyte, ushort, uint, ulong, float, decimal, double, char, bool</code></li><li>Pourquoi pas string ?<br> → Avec un string, on travaille avec une référence à une chaîne de caractères dans la mémoire.<br> En type valeur, on travaille avec la valeur elle-même.</li></ul><h2 id="les-variables-de-type-reference" tabindex="-1">Les variables de type référence <a class="header-anchor" href="#les-variables-de-type-reference" aria-label="Permalink to &quot;Les variables de type référence&quot;">​</a></h2><ul><li>Les <strong>variables de type référence</strong> stockent des références à leurs données (objets).</li><li>Ce typage trouve tout son intérêt dans l&#39;orienté objet.</li><li>Types référence : <code>string</code>, tout ce qu&#39;on a créé avec le mot clé <code>new</code> (ex : tableaux, listes, etc).</li></ul><h2 id="tableaux-des-principaux-types-c" tabindex="-1">Tableaux des principaux types C# <a class="header-anchor" href="#tableaux-des-principaux-types-c" aria-label="Permalink to &quot;Tableaux des principaux types C#&quot;">​</a></h2><table tabindex="0"><thead><tr><th>C# Alias</th><th>Range</th><th>Size</th><th>C# Alias</th><th>Range</th></tr></thead><tbody><tr><td>byte</td><td>0 à 255</td><td>1 byte</td><td>sbyte</td><td>-128 à 127</td></tr><tr><td>short</td><td>-32768 à 32767</td><td>2 bytes</td><td>ushort</td><td>0 à 65535</td></tr><tr><td>int</td><td>-2,147,483,648 à</td><td>4 bytes</td><td>uint</td><td>0 à 4,294,967,295</td></tr><tr><td></td><td>2,147,483,647</td><td></td><td></td><td></td></tr><tr><td>long</td><td>-9,223,372,036,854,775,808 à 9,223,372,036,854,775,807</td><td>8 bytes</td><td>ulong</td><td>0 à 18,446,744,073,709,551,615</td></tr></tbody></table><table tabindex="0"><thead><tr><th>C# Alias</th><th>Size</th><th>Précision</th><th>Range</th></tr></thead><tbody><tr><td>float</td><td>4 bytes</td><td>7 digits</td><td>±1.5×10⁻⁴⁵ à ±3.4×10³⁸</td></tr><tr><td>double</td><td>8 bytes</td><td>15-16 digits</td><td>±5.0×10⁻³²⁴ à ±1.7×10³⁰⁸</td></tr><tr><td>decimal</td><td>16 bytes</td><td>28-29 décimales</td><td>±1.0×10⁻²⁸ à ±7.9×10²⁸</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">Bit et Byte</p><ul><li>Un <strong>byte</strong> ou <strong>octet</strong> représente 8 bits.</li><li>Un <strong>bit</strong> est soit un 0, soit un 1.</li><li>Un <strong>char</strong> représente un seul caractère codé sur 16 bits (Unicode).</li><li>Une <strong>constante entière</strong> est par défaut de type <code>int</code>, et une <strong>constante réelle</strong> est par défaut de type <code>double</code>.</li></ul></div><h2 id="la-portee-des-variables" tabindex="-1">La portée des variables <a class="header-anchor" href="#la-portee-des-variables" aria-label="Permalink to &quot;La portée des variables&quot;">​</a></h2><ul><li>La portée d&#39;une variable, c&#39;est la <strong>partie du code</strong> dans laquelle une variable est accessible.</li><li>Une variable locale est visible uniquement dans la partie du code où elle a été déclarée (jusqu&#39;à la fermeture de l&#39;accolade qui termine le bloc).</li><li>Exemple portée inaccessible :<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// erreur : i inaccessible ici</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li>Exemple portée accessible :<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nombre</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nombre);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="methodes-d-assemblage-de-strings" tabindex="-1">Méthodes d&#39;assemblage de strings <a class="header-anchor" href="#methodes-d-assemblage-de-strings" aria-label="Permalink to &quot;Méthodes d&#39;assemblage de strings&quot;">​</a></h2><ul><li><strong>Concaténation</strong> :<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span></code></pre></div></li><li><strong>Interpolation</strong> :<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $&quot;Hello {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><strong>Formatage de chaîne</strong> :<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello {0}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name);</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Note</p><p>Toujours avec <code>Console.WriteLine(…)</code> ! (Sinon, <code>string.Format</code>)</p></div></li></ul>`,13)])])}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
