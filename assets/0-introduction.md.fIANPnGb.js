import{_ as n,C as t,c as l,o as e,a2 as r,b as o,j as p,w as a,a as d,G as h,a3 as c}from"./chunks/framework.D2LT7fmo.js";const C=JSON.parse('{"title":"Introduction à la programmation","description":"","frontmatter":{},"headers":[],"relativePath":"0-introduction.md","filePath":"0-introduction.md","lastUpdated":1757509408000}'),u={name:"0-introduction.md"};function g(k,s,m,E,b,y){const i=t("Mermaid");return e(),l("div",null,[s[1]||(s[1]=r(`<h1 id="introduction-a-la-programmation" tabindex="-1">Introduction à la programmation <a class="header-anchor" href="#introduction-a-la-programmation" aria-label="Permalink to &quot;Introduction à la programmation&quot;">​</a></h1><h2 id="concepts-fondamentaux" tabindex="-1">Concepts fondamentaux <a class="header-anchor" href="#concepts-fondamentaux" aria-label="Permalink to &quot;Concepts fondamentaux&quot;">​</a></h2><ul><li>La programmation va de : <strong>algorithme → langage de prog. → logiciel</strong></li><li>Un <strong>algorithme</strong> est une suite finie et non-ambiguë d&#39;<strong>instructions</strong> permettant de donner <strong>la réponse à un problème</strong>.</li><li>Un <strong>langage de programmation</strong> est une notation conventionnelle destinée à formuler des algorithmes et à produire des programmes informatiques qui les appliquent.</li><li>En informatique, un <strong>logiciel</strong> est un ensemble de séquences (= suite) d&#39;instructions interprétables par une machine et d&#39;un jeu de données nécessaires à ses opérations.</li><li>Exemple en programmation :<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>algorithme </span></span>
<span class="line"><span>  → C#, Java, C++, Python, JS, ... </span></span>
<span class="line"><span>  → prog.exe, un site web, ...</span></span></code></pre></div></li></ul><h2 id="vocabulaire" tabindex="-1">Vocabulaire <a class="header-anchor" href="#vocabulaire" aria-label="Permalink to &quot;Vocabulaire&quot;">​</a></h2><ul><li><strong>Code source</strong> : code écrit par un développeur dans le but d&#39;obtenir un logiciel.</li><li><strong>Compilation</strong> : transformation du code source en un logiciel exécutable.</li><li><strong>Exécution</strong> : lancement du logiciel par le système d&#39;exploitation (Windows, par exemple).</li><li><strong>Erreur de syntaxe</strong> : le code source ne correspond pas à la grammaire du langage utilisé.</li><li><strong>Erreur de sémantique</strong> : le programme peut être compilé mais lors de l&#39;exécution il ne fait pas ce qui était prévu (c&#39;est le « sens » du code qui n&#39;est pas correct).</li></ul><h2 id="paradigmes-multiples" tabindex="-1">Paradigmes multiples <a class="header-anchor" href="#paradigmes-multiples" aria-label="Permalink to &quot;Paradigmes multiples&quot;">​</a></h2><ul><li>Un <strong>paradigme</strong> est une manière de penser.</li><li>On peut programmer en voyant un code de plusieurs manières différentes : <ul><li><strong>procédural</strong> (programme = ensemble de procédures)</li><li><strong>orienté objet</strong> (programme = ensemble d&#39;objets qui se parlent)</li><li><strong>fonctionnel</strong> (programme = ensemble de fonctions qui sont appelées les unes sur les autres)</li><li><strong>logique</strong> (programme = règles et faits)</li></ul></li><li>Cet aspect influence le code produit, la méthode, etc.</li></ul><h2 id="console-net" tabindex="-1">Console .NET <a class="header-anchor" href="#console-net" aria-label="Permalink to &quot;Console .NET&quot;">​</a></h2><h3 id="net-5" tabindex="-1">.NET 5 <a class="header-anchor" href="#net-5" aria-label="Permalink to &quot;.NET 5&quot;">​</a></h3><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyFirstConsApp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>Le <strong>framework</strong> (technologie) propose des ressources dans un environnement hiérarchisé.</li></ul><h3 id="a-partir-de-net-6" tabindex="-1">A partir de .NET 6 <a class="header-anchor" href="#a-partir-de-net-6" aria-label="Permalink to &quot;A partir de .NET 6&quot;">​</a></h3><ul><li>Avec les mises à jour, il est possible de simplifier :<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li></ul><h2 id="syntaxe-generale-du-langage" tabindex="-1">Syntaxe générale du langage <a class="header-anchor" href="#syntaxe-generale-du-langage" aria-label="Permalink to &quot;Syntaxe générale du langage&quot;">​</a></h2><ul><li>Il faut respecter les <strong>majuscules</strong> et <strong>minuscules</strong>.</li><li>Chaque ligne de code se termine par un <code>;</code></li><li>Un bloc de code s&#39;identifie <strong>par des accolades</strong> <code>{ ... }</code></li><li>On peut ajouter un commentaire avec <code>//</code></li><li><strong>camelCase</strong> : façon d&#39;écrire les variables (ex : <code>maVariable</code>)</li><li>La <strong>signature d&#39;une fonction</strong> est un ensemble d&#39;informations qui définit comment une fonction peut être appelée dans le code : <ul><li>Nom de la fonction</li><li>Type et nombre de paramètres</li><li>Type de retour de la fonction</li></ul></li></ul><p>Exemple en C# :</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AfficherMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>nom : <code>AfficherMessage</code></li><li>paramètre : <code>string message</code> (chaîne de char)</li><li>type de retour : <code>void</code> (la fonction ne renvoie rien)</li></ul><h2 id="plan-du-cours" tabindex="-1">Plan du cours <a class="header-anchor" href="#plan-du-cours" aria-label="Permalink to &quot;Plan du cours&quot;">​</a></h2><p>Le cours s&#39;organise de façon progressive, des concepts les plus fondamentaux aux plus avancés.</p>`,20)),(e(),o(c,null,{default:a(()=>[h(i,{id:"mermaid-210",class:"mermaid",graph:"flowchart%20TD%0A%20%20%20%20A%5BIntroduction%20%C3%A0%20la%20programmation%5D%20--%3E%20B%5BVariables%20et%20Types%5D%0A%20%20%20%20B%20--%3E%20C%5BOp%C3%A9rateurs%5D%0A%20%20%20%20C%20--%3E%20D%5BConversions%5D%0A%20%20%20%20D%20--%3E%20E%5BStructures%20de%20Contr%C3%B4le%5D%0A%20%20%20%20E%20--%3E%20F%5BOrganisation%20de%20la%20M%C3%A9moire%5D%0A%20%20%20%20F%20--%3E%20G%5BTableaux%20et%20Collections%5D%0A%20%20%20%20G%20--%3E%20H%5BFonctions%5D%0A%20%20%20%20%0A"})]),fallback:a(()=>[...s[0]||(s[0]=[d(" Loading... ",-1)])]),_:1})),s[2]||(s[2]=p("p",null,"Chaque chapitre s'appuie sur les connaissances des chapitres précédents, il est donc important de bien comprendre les concepts avant de passer au chapitre suivant.",-1))])}const v=n(u,[["render",g]]);export{C as __pageData,v as default};
