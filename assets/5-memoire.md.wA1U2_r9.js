import{_ as p,C as h,c as d,o as l,a2 as k,j as s,b as n,w as i,a,G as r,a3 as o}from"./chunks/framework.D2LT7fmo.js";const D=JSON.parse(`{"title":"L'organisation de la mémoire","description":"","frontmatter":{},"headers":[],"relativePath":"5-memoire.md","filePath":"5-memoire.md","lastUpdated":1757510050000}`),c={name:"5-memoire.md"},u={class:"info custom-block"};function A(g,e,m,C,E,b){const t=h("Mermaid");return l(),d("div",null,[e[5]||(e[5]=k(`<h1 id="l-organisation-de-la-memoire" tabindex="-1">L&#39;organisation de la mémoire <a class="header-anchor" href="#l-organisation-de-la-memoire" aria-label="Permalink to &quot;L&#39;organisation de la mémoire&quot;">​</a></h1><h2 id="la-pile-stack" tabindex="-1">La pile (stack) <a class="header-anchor" href="#la-pile-stack" aria-label="Permalink to &quot;La pile (stack)&quot;">​</a></h2><ol><li>La pile est organisée sous la forme <strong>LIFO</strong> (Last In First Out) : le dernier élément ajouté est le premier retiré (comme une pile de livres).</li><li>On y stocke les types de données <strong>simples</strong> (<code>int</code>, <code>char</code>, <code>bool</code>), avec taille fixe et connue.</li><li><strong>Gestion du programme</strong> : la pile contient des informations comme les variables locales de fonctions. Quand une fonction est appelée, ses variables sont ajoutées à la pile.</li><li><strong>Arguments des fonctions</strong> : les valeurs passées à une fonction y sont aussi stockées localement.</li><li><strong>Taille limitée</strong> : souvent ~1Mo. Dépasser donne un &quot;dépassement de pile&quot;.</li></ol><div class="warning custom-block"><p class="custom-block-title">Stack Overflow</p><p>Une erreur de type &quot;Stack Overflow&quot; (débordement de pile) se produit quand la pile est pleine, souvent à cause d&#39;une récursion infinie ou trop profonde.</p></div><h2 id="le-tas-heap" tabindex="-1">Le tas (heap) <a class="header-anchor" href="#le-tas-heap" aria-label="Permalink to &quot;Le tas (heap)&quot;">​</a></h2><ol><li>Utilisé pour stocker les <strong>données grandes et complexes</strong> (tableaux, objets).</li><li><strong>Taille flexible</strong> : pas de limite stricte.</li><li><strong>Distingué par &quot;new&quot;</strong> : on range sur le tas en créant des objets avec <code>new</code>.</li><li><strong>Nettoyage automatique</strong> via le <strong>garbage collector (GC)</strong> : quand des données ne sont plus utilisées, GC les libère.</li></ol><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// référence data sur la pile, tableau sur le tas</span></span></code></pre></div><h2 id="le-garbage-collector" tabindex="-1">Le garbage collector <a class="header-anchor" href="#le-garbage-collector" aria-label="Permalink to &quot;Le garbage collector&quot;">​</a></h2><ul><li>Tant qu&#39;une donnée sur le tas est référencée, elle ne sera pas supprimée.</li><li>Dès qu&#39;elle n&#39;est plus référencée, elle peut être libérée par le GC.</li><li>L&#39;appel au GC est <strong>automatique</strong> mais peut être forcé :<div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// plus référencé</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GC.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// appel forcé au GC</span></span></code></pre></div></li></ul><h2 id="les-references-multiples" tabindex="-1">Les références multiples <a class="header-anchor" href="#les-references-multiples" aria-label="Permalink to &quot;Les références multiples&quot;">​</a></h2><ul><li>Plusieurs variables peuvent pointer vers le même objet sur le tas. L&#39;objet reste en mémoire tant qu&#39;une référence y pointe.</li><li>Mettre une variable à <code>null</code> ne supprime pas l&#39;objet s&#39;il est encore référencé ailleurs.</li></ul><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GC.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// tableau reste car data2 le pointe</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data2[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre></div><h2 id="representation-visuelle" tabindex="-1">Représentation visuelle <a class="header-anchor" href="#representation-visuelle" aria-label="Permalink to &quot;Représentation visuelle&quot;">​</a></h2>`,13)),s("div",u,[e[1]||(e[1]=s("p",{class:"custom-block-title"},"Organisation de la mémoire en C#",-1)),(l(),n(o,null,{default:i(()=>[r(t,{id:"mermaid-105",class:"mermaid",graph:"flowchart%20LR%0A%20%20%20%20subgraph%20Stack%5B%22Stack%20(Pile)%22%5D%0A%20%20%20%20%20%20%20%20A%5Bint%20a%20%3D%2010%5D%0A%20%20%20%20%20%20%20%20B%5Bint%20b%20%3D%2020%5D%0A%20%20%20%20%20%20%20%20C%5B%22int%5B%5D%20arr%22%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20Heap%5B%22Heap%20(Tas)%22%5D%0A%20%20%20%20%20%20%20%20D%5B%22int%5B3%5D%22%5D%0A%20%20%20%20%20%20%20%20D1%5B100%5D%0A%20%20%20%20%20%20%20%20D2%5B200%5D%0A%20%20%20%20%20%20%20%20D3%5B300%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20C%20--%20r%C3%A9f%C3%A9rence%20--%3E%20D%0A%20%20%20%20D%20--%3E%20D1%0A%20%20%20%20D%20--%3E%20D2%0A%20%20%20%20D%20--%3E%20D3%0A%20%20%20%20%0A%20%20%20%20%25%25%20Styles%20pour%20meilleure%20lisibilit%C3%A9%0A%20%20%20%20classDef%20stackNode%20fill%3A%23b3e0ff%2Cstroke%3A%230066cc%2Cstroke-width%3A2px%2Ccolor%3A%23333%0A%20%20%20%20classDef%20heapNode%20fill%3A%23ffcccc%2Cstroke%3A%23cc0000%2Cstroke-width%3A2px%2Ccolor%3A%23333%0A%20%20%20%20classDef%20stackHeader%20fill%3A%230066cc%2Cstroke%3A%23003366%2Cstroke-width%3A2px%2Ccolor%3Awhite%0A%20%20%20%20classDef%20heapHeader%20fill%3A%23cc0000%2Cstroke%3A%23990000%2Cstroke-width%3A2px%2Ccolor%3Awhite%0A%20%20%20%20%0A%20%20%20%20class%20A%2CB%2CC%20stackNode%0A%20%20%20%20class%20D%2CD1%2CD2%2CD3%20heapNode%0A%20%20%20%20class%20Stack%20stackHeader%0A%20%20%20%20class%20Heap%20heapHeader%0A"})]),fallback:i(()=>[...e[0]||(e[0]=[a(" Loading... ",-1)])]),_:1})),e[2]||(e[2]=s("p",null,"Dans cet exemple :",-1)),e[3]||(e[3]=s("ul",null,[s("li",null,[a("Les variables simples "),s("code",null,"a"),a(" et "),s("code",null,"b"),a(" sont stockées sur la pile")]),s("li",null,"Le tableau est créé sur le tas"),s("li",null,[a("La variable "),s("code",null,"arr"),a(" sur la pile contient une référence (adresse mémoire) vers le tableau sur le tas")])],-1))]),e[6]||(e[6]=s("h3",{id:"vue-conceptuelle-de-l-allocation-memoire",tabindex:"-1"},[a("Vue conceptuelle de l'allocation mémoire "),s("a",{class:"header-anchor",href:"#vue-conceptuelle-de-l-allocation-memoire","aria-label":`Permalink to "Vue conceptuelle de l'allocation mémoire"`},"​")],-1)),(l(),n(o,null,{default:i(()=>[r(t,{id:"mermaid-130",class:"mermaid",graph:"flowchart%20TD%0A%20%20%20%20subgraph%20Stack%5B%22Stack%20(Pile)%22%5D%0A%20%20%20%20%20%20%20%20A%5BVariables%20types%20valeur%5D%0A%20%20%20%20%20%20%20%20B%5BVariables%20types%20r%C3%A9f%C3%A9rence%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20Heap%5B%22Heap%20(Tas)%22%5D%0A%20%20%20%20%20%20%20%20C%5BObjets%5D%0A%20%20%20%20%20%20%20%20D%5BTableaux%5D%0A%20%20%20%20%20%20%20%20E%5BClasses%5D%0A%20%20%20%20%20%20%20%20F%5BCha%C3%AEnes%20de%20caract%C3%A8res%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20B%20--%3E%7Cr%C3%A9f%C3%A9rence%7C%20C%0A%20%20%20%20B%20--%3E%7Cr%C3%A9f%C3%A9rence%7C%20D%0A%20%20%20%20B%20--%3E%7Cr%C3%A9f%C3%A9rence%7C%20E%0A%20%20%20%20B%20--%3E%7Cr%C3%A9f%C3%A9rence%7C%20F%0A%20%20%20%20%0A%20%20%20%20%25%25%20Styles%20pour%20meilleure%20lisibilit%C3%A9%0A%20%20%20%20classDef%20stackNode%20fill%3A%23b3e0ff%2Cstroke%3A%230066cc%2Cstroke-width%3A2px%2Ccolor%3A%23333333%2Cfont-weight%3Abold%0A%20%20%20%20classDef%20heapNode%20fill%3A%23ffcccc%2Cstroke%3A%23cc0000%2Cstroke-width%3A2px%2Ccolor%3A%23333333%2Cfont-weight%3Abold%0A%20%20%20%20classDef%20stackHeader%20fill%3A%230066cc%2Cstroke%3A%23003366%2Cstroke-width%3A2px%2Ccolor%3Awhite%2Cfont-weight%3Abold%0A%20%20%20%20classDef%20heapHeader%20fill%3A%23cc0000%2Cstroke%3A%23990000%2Cstroke-width%3A2px%2Ccolor%3Awhite%2Cfont-weight%3Abold%0A%20%20%20%20%0A%20%20%20%20class%20A%2CB%20stackNode%0A%20%20%20%20class%20C%2CD%2CE%2CF%20heapNode%0A%20%20%20%20class%20Stack%20stackHeader%0A%20%20%20%20class%20Heap%20heapHeader%0A%20%20%20%20%0A%20%20%20%20linkStyle%200%2C1%2C2%2C3%20stroke%3A%23333333%2Cstroke-width%3A2px%0A"})]),fallback:i(()=>[...e[4]||(e[4]=[a(" Loading... ",-1)])]),_:1})),e[7]||(e[7]=s("h2",{id:"implications-pour-la-programmation",tabindex:"-1"},[a("Implications pour la programmation "),s("a",{class:"header-anchor",href:"#implications-pour-la-programmation","aria-label":'Permalink to "Implications pour la programmation"'},"​")],-1)),e[8]||(e[8]=s("ul",null,[s("li",null,[s("strong",null,"Variables valeur"),a(" (stockées sur la pile) sont plus rapides d'accès")]),s("li",null,[s("strong",null,"Variables référence"),a(" (pointant vers le tas) sont plus flexibles pour des données complexes")]),s("li",null,"Comprendre cette organisation aide à debugger les problèmes de mémoire"),s("li",null,`Le mécanisme de "passage par référence" vs "passage par valeur" s'explique par cette organisation`)],-1))])}const y=p(c,[["render",A]]);export{D as __pageData,y as default};
