import{_ as r,C as d,c as o,o as n,a2 as k,b as t,j as i,w as a,a as e,G as p,a3 as h}from"./chunks/framework.D2LT7fmo.js";const f=JSON.parse('{"title":"Les fonctions","description":"","frontmatter":{},"headers":[],"relativePath":"7-fonctions.md","filePath":"7-fonctions.md","lastUpdated":1757946869000}'),E={name:"7-fonctions.md"};function c(g,s,y,u,A,F){const l=d("Mermaid");return n(),o("div",null,[s[4]||(s[4]=k(`<h1 id="les-fonctions" tabindex="-1">Les fonctions <a class="header-anchor" href="#les-fonctions" aria-label="Permalink to &quot;Les fonctions&quot;">​</a></h1><h2 id="concept-de-base" tabindex="-1">Concept de base <a class="header-anchor" href="#concept-de-base" aria-label="Permalink to &quot;Concept de base&quot;">​</a></h2><p>Imaginez une fonction comme une petite machine à laquelle on confie une tâche précise. On lui fournit des éléments en entrée, elle exécute des étapes bien définies, puis elle nous renvoie éventuellement un résultat. C’est une manière d’organiser sa pensée et son code : on découpe un problème en gestes simples, réutilisables, et on leur donne un nom parlant.</p><ul><li>Une <strong>fonction</strong> est un bloc d&#39;instructions qui porte un nom, qui peut prendre des <strong>paramètres</strong> (int, char, string, ...) en entrée et peut renvoyer une <strong>valeur</strong> en sortie.</li></ul><p>Pourquoi des fonctions ?</p><ul><li>Clarifier le code en le découpant en morceaux cohérents et faciles à lire.</li><li>Éviter la répétition (DRY: Don’t Repeat Yourself) et donc réduire les erreurs.</li><li>Nommer l’intention: un bon nom raconte ce que fait le code.</li><li>Tester plus facilement chaque pièce du programme, indépendamment des autres.</li></ul><h2 id="definition-d-une-fonction" tabindex="-1">Définition d&#39;une fonction <a class="header-anchor" href="#definition-d-une-fonction" aria-label="Permalink to &quot;Définition d&#39;une fonction&quot;">​</a></h2><h3 id="exemple-de-signature-simple" tabindex="-1">Exemple de signature simple <a class="header-anchor" href="#exemple-de-signature-simple" aria-label="Permalink to &quot;Exemple de signature simple&quot;">​</a></h3><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Affiche</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> texte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(texte);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Pour appeler cette fonction :</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Affiche</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bonjour&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="avec-plusieurs-parametres" tabindex="-1">Avec plusieurs paramètres <a class="header-anchor" href="#avec-plusieurs-parametres" aria-label="Permalink to &quot;Avec plusieurs paramètres&quot;">​</a></h3><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AfficheNFois</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> texte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nb; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(texte);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Pour appeler cette fonction :</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AfficheNFois</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bonjour&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="fonction-avec-valeur-de-retour" tabindex="-1">Fonction avec valeur de retour <a class="header-anchor" href="#fonction-avec-valeur-de-retour" aria-label="Permalink to &quot;Fonction avec valeur de retour&quot;">​</a></h2><p>Reprenons notre métaphore de la « petite machine » : parfois, on lui demande simplement d’agir (afficher un texte), parfois on lui demande de calculer et de nous rapporter un résultat. Dans ce second cas, la fonction s’engage à « rendre » une valeur à l’aide du mot-clé <code>return</code>.</p><p>Une fonction peut donc <strong>renvoyer une valeur</strong> avec <code>return</code> :</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Somme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resultat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resultat;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Astuce de lecture: le type placé avant le nom de la fonction (<code>int</code> ici) annonce la nature de la valeur promise en retour. Si la fonction ne renvoie rien, on écrit <code>void</code>.</p><p>Pour utiliser la valeur renvoyée :</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> total</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Somme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(total);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Affiche 8</span></span></code></pre></div><h2 id="le-passage-de-parametres" tabindex="-1">Le passage de paramètres <a class="header-anchor" href="#le-passage-de-parametres" aria-label="Permalink to &quot;Le passage de paramètres&quot;">​</a></h2><p>Quand on appelle une fonction, on lui « apporte » des informations: ce sont les paramètres. Deux manières principales existent pour les transmettre, et elles ne racontent pas la même histoire.</p><ul><li>Par valeur: on donne une copie. La fonction travaille sur son exemplaire à elle.</li><li>Par référence: on donne un lien vers l’original. La fonction peut alors modifier la chose d’origine.</li></ul><p>Métaphore: prêter un livre</p><ul><li>Par valeur, c’est comme donner une photocopie: si l’autre surligne, votre livre reste intact.</li><li>Par référence, c’est prêter votre vrai livre: s’il est annoté, votre exemplaire change.</li></ul><h3 id="par-valeur" tabindex="-1">Par valeur <a class="header-anchor" href="#par-valeur" aria-label="Permalink to &quot;Par valeur&quot;">​</a></h3><p>La fonction reçoit une <strong>copie</strong> du paramètre, les modifications sont locales seulement.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Increment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nombre</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nombre</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Modification locale uniquement</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dans la fonction : &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nombre);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Increment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Après appel : &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Affiche toujours 5</span></span></code></pre></div><h3 id="par-reference" tabindex="-1">Par référence <a class="header-anchor" href="#par-reference" aria-label="Permalink to &quot;Par référence&quot;">​</a></h3><p>La variable locale et le paramètre partagent la même instance. On utilise <code>ref</code> ou <code>out</code>.</p><h4 id="avec-ref" tabindex="-1">Avec ref <a class="header-anchor" href="#avec-ref" aria-label="Permalink to &quot;Avec ref&quot;">​</a></h4><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Increment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nombre</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nombre</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Modifie la variable d&#39;origine</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Increment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Affiche 6</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Erreurs fréquentes</p><ul><li>Oublier d’écrire <code>ref</code> à l’appel comme dans la définition: <code>Increment(ref x)</code>.</li><li>Confondre « modifier la chose » et « changer vers une nouvelle chose »: sur un type référence, on peut modifier l’objet pointé même si on a passé « par valeur » (voir plus bas).</li><li>Utiliser <code>out</code> sans initialiser la variable à l’appel: c’est normal, <code>out</code> promet qu’elle sera assignée dans la fonction.</li></ul></div><h3 id="visualisation-du-passage-de-parametres" tabindex="-1">Visualisation du passage de paramètres <a class="header-anchor" href="#visualisation-du-passage-de-parametres" aria-label="Permalink to &quot;Visualisation du passage de paramètres&quot;">​</a></h3>`,36)),(n(),t(h,null,{default:a(()=>[p(l,{id:"mermaid-149",class:"mermaid",graph:"flowchart%20TD%0A%20%20%20%20subgraph%20%22Passage_par_valeur%22%0A%20%20%20%20%20%20%20%20A1%5BAppelant%3A%20x%20%3D%205%5D%20--%3E%20A2%5B%22Copie%20vers%20param%C3%A8tre%22%5D%0A%20%20%20%20%20%20%20%20A2%20--%3E%20A3%5BFonction%3A%20nombre%20%3D%205%5D%0A%20%20%20%20%20%20%20%20A3%20--%3E%20A4%5BFonction%3A%20nombre%2B%2B%20%3D%206%5D%0A%20%20%20%20%20%20%20%20A4%20-.-%20A5%5BAppelant%3A%20x%20reste%205%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22Passage_par_reference%22%0A%20%20%20%20%20%20%20%20B1%5BAppelant%3A%20x%20%3D%205%5D%20--%3E%20B2%5B%22r%C3%A9f%C3%A9rence%20vers%20param%C3%A8tre%22%5D%0A%20%20%20%20%20%20%20%20B2%20--%3E%20B3%5BFonction%3A%20nombre%20%3D%205%5D%0A%20%20%20%20%20%20%20%20B3%20--%3E%20B4%5BFonction%3A%20nombre%2B%2B%20%3D%206%5D%0A%20%20%20%20%20%20%20%20B4%20--%3E%20B5%5BAppelant%3A%20x%20devient%206%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20%25%25%20Styles%20pour%20meilleure%20lisibilit%C3%A9%0A%20%20%20%20classDef%20valeur%20fill%3A%234d94ff%2Cstroke%3A%230047b3%2Cstroke-width%3A2px%2Ccolor%3A%23fff%2Cfont-weight%3Abold%0A%20%20%20%20classDef%20fonction%20fill%3A%23ff9980%2Cstroke%3A%23cc3300%2Cstroke-width%3A2px%2Ccolor%3A%23fff%2Cfont-weight%3Abold%0A%20%20%20%20classDef%20resultat%20fill%3A%235cd65c%2Cstroke%3A%23267326%2Cstroke-width%3A2px%2Ccolor%3A%23fff%2Cfont-weight%3Abold%0A%20%20%20%20%0A%20%20%20%20class%20A1%2CA5%2CB1%2CB5%20valeur%0A%20%20%20%20class%20A3%2CA4%2CB3%2CB4%20fonction%0A%20%20%20%20%0A%20%20%20%20linkStyle%200%2C1%2C2%2C4%2C5%2C6%2C7%20stroke%3A%23333333%2Cstroke-width%3A2px%0A%20%20%20%20linkStyle%203%20stroke%3A%23333333%2Cstroke-width%3A2px%2Cstroke-dasharray%3A%205%205%0A"})]),fallback:a(()=>[...s[0]||(s[0]=[e(" Loading... ",-1)])]),_:1})),s[5]||(s[5]=i("h2",{id:"types-valeur-vs-types-reference",tabindex:"-1"},[e("Types valeur vs types référence "),i("a",{class:"header-anchor",href:"#types-valeur-vs-types-reference","aria-label":'Permalink to "Types valeur vs types référence"'},"​")],-1)),s[6]||(s[6]=i("p",null,"Pour bien comprendre ce qui se passe « sous le capot », il faut distinguer deux familles de types. Cette distinction explique pourquoi, parfois, une modification semble « rester » après l’appel d’une fonction… et parfois pas.",-1)),s[7]||(s[7]=i("p",null,"Les comportements du passage de paramètres varient selon qu'il s'agit de types valeur (int, bool, struct...) ou de types référence (objets, tableaux, chaînes...).",-1)),s[8]||(s[8]=i("h3",{id:"types-valeur-passage-par-valeur-vs-reference",tabindex:"-1"},[e("Types valeur : passage par valeur vs référence "),i("a",{class:"header-anchor",href:"#types-valeur-passage-par-valeur-vs-reference","aria-label":'Permalink to "Types valeur : passage par valeur vs référence"'},"​")],-1)),(n(),t(h,null,{default:a(()=>[p(l,{id:"mermaid-162",class:"mermaid",graph:"flowchart%20TD%0A%20%20%20%20%25%25%20Type%20valeur%20pass%C3%A9%20par%20valeur%0A%20%20%20%20subgraph%20tvv%5B%22Type%20valeur%20par%20valeur%22%5D%0A%20%20%20%20%20%20%20%20A1(%22Appelant%3A%20int%20x%20%3D%205%22)%0A%20%20%20%20%20%20%20%20A2%5B%22Fonction%3A%20int%20nombre%20%3D%205%20(copie)%22%5D%0A%20%20%20%20%20%20%20%20A1%20--%3E%20A2%0A%20%20%20%20%20%20%20%20A2%20--%3E%20A3%5B%22Fonction%3A%20nombre%20devient%206%22%5D%0A%20%20%20%20%20%20%20%20A3%20-.-%20A1%0A%20%20%20%20end%0A%0A%20%20%20%20%25%25%20Type%20valeur%20pass%C3%A9%20par%20r%C3%A9f%C3%A9rence%0A%20%20%20%20subgraph%20tvr%5B%22Type%20valeur%20par%20r%C3%A9f%C3%A9rence%22%5D%0A%20%20%20%20%20%20%20%20B1%5B%22Appelant%3A%20int%20y%20%3D%205%22%5D%0A%20%20%20%20%20%20%20%20B2%5B%22Fonction%3A%20ref%20int%20nombre%20%3D%205%22%5D%0A%20%20%20%20%20%20%20%20B1%20%3C--%3E%20B2%0A%20%20%20%20%20%20%20%20B2%20--%3E%20B3%5B%22Fonction%3A%20nombre%20devient%206%22%5D%0A%20%20%20%20%20%20%20%20B3%20--%3E%20B1%0A%20%20%20%20end%0A%0A%20%20%20%20%25%25%20Styles%20pour%20meilleure%20lisibilit%C3%A9%0A%20%20%20%20classDef%20stack%20fill%3A%23f0f0f0%2Cstroke%3A%232B6087%2Cstroke-width%3A1px%0A%20%20%20%20classDef%20section%20fill%3A%23E1F5FE%2Cstroke%3A%232B6087%2Cstroke-width%3A1px%0A%20%20%20%20classDef%20variable%20fill%3A%234d94ff%2Cstroke%3A%230047b3%2Cstroke-width%3A2px%2Ccolor%3A%23fff%2Cfont-weight%3Abold%0A%0A%20%20%20%20class%20A1%2CA2%2CA3%2CB1%2CB2%2CB3%20variable%0A%0A%20%20%20%20%25%25%20Style%20des%20fl%C3%A8ches%0A%20%20%20%20linkStyle%200%2C1%2C3%2C4%2C5%20stroke%3A%23333333%2Cstroke-width%3A2px%0A%20%20%20%20linkStyle%202%20stroke%3A%23333333%2Cstroke-width%3A2px%2Cstroke-dasharray%3A%205%205%0A"})]),fallback:a(()=>[...s[1]||(s[1]=[e(" Loading... ",-1)])]),_:1})),s[9]||(s[9]=i("h3",{id:"types-reference-passage-par-valeur-vs-reference",tabindex:"-1"},[e("Types référence : passage par valeur vs référence "),i("a",{class:"header-anchor",href:"#types-reference-passage-par-valeur-vs-reference","aria-label":'Permalink to "Types référence : passage par valeur vs référence"'},"​")],-1)),(n(),t(h,null,{default:a(()=>[p(l,{id:"mermaid-166",class:"mermaid",graph:"flowchart%20LR%0A%20%20%20%20subgraph%20%22Stack%22%0A%20%20%20%20%20%20%20%20subgraph%20%22Type%20r%C3%A9f%C3%A9rence%20par%20valeur%22%0A%20%20%20%20%20%20%20%20%20%20%20%20A1%5B%22int%5B%5D%20arr%20%3D%20%5B1%2C2%2C3%5D%22%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20A2%5B%22int%5B%5D%20param%20(copie%20de%20r%C3%A9f%C3%A9rence)%22%5D%0A%20%20%20%20%20%20%20%20end%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20subgraph%20%22Type%20r%C3%A9f%C3%A9rence%20par%20reference%22%0A%20%20%20%20%20%20%20%20%20%20%20%20B1%5B%22int%5B%5D%20arr%20%3D%20%5B1%2C2%2C3%5D%22%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20B2%5B%22ref%20int%5B%5D%20param%20(m%C3%AAme%20r%C3%A9f%C3%A9rence)%22%5D%0A%20%20%20%20%20%20%20%20end%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20subgraph%20%22Heap%22%0A%20%20%20%20%20%20%20%20C1%5B%22%5B1%2C2%2C3%5D%22%5D%20%0A%20%20%20%20%20%20%20%20C2%5B%22%5B1%2C2%2C3%20devient%201%2C2%2C9%5D%22%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20%25%25%20Connexions90%0A%20%20%20%20A1%20--%3E%20C1%0A%20%20%20%20A2%20--%3E%20C1%0A%20%20%20%20A2%20--%3E%20C2%0A%20%20%20%20%0A%20%20%20%20B1%20%3C--%3E%20B2%0A%20%20%20%20B1%20--%3E%20C1%0A%20%20%20%20B2%20--%3E%20C2%0A%20%20%20%20%0A%20%20%20%20%25%25%20Styles%20pour%20meilleure%20lisibilit%C3%A9%0A%20%20%20%20classDef%20stack%20fill%3A%23f0f0f0%2Cstroke%3A%232B6087%2Cstroke-width%3A1px%0A%20%20%20%20classDef%20section%20fill%3A%23E1F5FE%2Cstroke%3A%232B6087%2Cstroke-width%3A1px%0A%20%20%20%20classDef%20heap%20fill%3A%23fff0f0%2Cstroke%3A%23CC3300%2Cstroke-width%3A1px%0A%20%20%20%20classDef%20stackVar%20fill%3A%234d94ff%2Cstroke%3A%230047b3%2Cstroke-width%3A2px%2Ccolor%3A%23fff%2Cfont-weight%3Abold%0A%20%20%20%20classDef%20heapVar%20fill%3A%23ff9980%2Cstroke%3A%23cc3300%2Cstroke-width%3A2px%2Ccolor%3A%23fff%2Cfont-weight%3Abold%0A%20%20%20%20%0A%20%20%20%20class%20Stack%20stack%0A%20%20%20%20class%20Heap%20heap%0A%20%20%20%20class%20Type_reference_par_valeur%2CType_reference_par_reference%20section%0A%20%20%20%20class%20A1%2CA2%2CB1%2CB2%20stackVar%0A%20%20%20%20class%20C1%2CC2%20heapVar%0A"})]),fallback:a(()=>[...s[2]||(s[2]=[e(" Loading... ",-1)])]),_:1})),s[10]||(s[10]=k(`<h3 id="exemple-concret-avec-tableau" tabindex="-1">Exemple concret avec tableau <a class="header-anchor" href="#exemple-concret-avec-tableau" aria-label="Permalink to &quot;Exemple concret avec tableau&quot;">​</a></h3><p>Voici comment les tableaux (types référence) se comportent avec différentes approches :</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Modification du tableau original</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModifierTableau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    param[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Modifie le tableau original</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Création d&#39;un nouveau tableau</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModifierNouveauTableau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nouveauArr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] {param[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], param[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // nouveauArr pointe vers un nouveau tableau</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // param n&#39;est pas modifié</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Dans le programme principal</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ModifierTableau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Affiche 9 (modifié)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ModifierNouveauTableau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Affiche 3 (non modifié)</span></span></code></pre></div>`,3)),(n(),t(h,null,{default:a(()=>[p(l,{id:"mermaid-174",class:"mermaid",graph:"flowchart%20LR%0A%20%20%20%20%25%25%20Ce%20qui%20se%20passe%20dans%20le%20programme%0A%20%20%20%20subgraph%20prog%5B%22Programme%22%5D%0A%20%20%20%20%20%20%20%20direction%20TB%0A%20%20%20%20%20%20%20%20P1%5B%22Main%3A%20int%5B%5D%20arr%20%3D%20%5B1%2C2%2C3%5D%22%5D%20--%3E%20P2%5B%22ModifierTableau(arr)%22%5D%0A%20%20%20%20%20%20%20%20P3%5B%22arr%20devient%20%5B1%2C2%2C9%5D%22%5D%20---%20P2%0A%0A%20%20%20%20%20%20%20%20P4%5B%22Main%3A%20int%5B%5D%20arr%20%3D%20%5B1%2C2%2C3%5D%22%5D%20--%3E%20P5%5B%22ModifierNouveauTableau(arr)%22%5D%0A%20%20%20%20%20%20%20%20P6%5B%22arr%20reste%20%5B1%2C2%2C3%5D%22%5D%20---%20P5%0A%20%20%20%20end%0A%0A%20%20%20%20%25%25%20Explication%20m%C3%A9moire%0A%20%20%20%20subgraph%20%22M%C3%A9moire%22%0A%20%20%20%20%20%20%20%20direction%20TB%0A%20%20%20%20%20%20%20%20subgraph%20%22Stack%22%0A%20%20%20%20%20%20%20%20%20%20%20%20S1%5B%22arr%20(r%C3%A9f%C3%A9rence)%22%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20S2%5B%22param%20(copie%20de%20la%20r%C3%A9f%C3%A9rence)%22%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20S3%5B%22nouveauArr%20(nouvelle%20r%C3%A9f%C3%A9rence)%22%5D%0A%20%20%20%20%20%20%20%20end%0A%0A%20%20%20%20%20%20%20%20subgraph%20%22Heap%22%0A%20%20%20%20%20%20%20%20%20%20%20%20H1%5B%22Tableau%20%5B1%2C2%2C3%5D%22%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20H2%5B%22Tableau%20%5B1%2C2%2C9%5D%22%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20H3%5B%22Nouveau%20tableau%20%5B1%2C2%2C9%5D%22%5D%0A%20%20%20%20%20%20%20%20end%0A%0A%20%20%20%20%20%20%20%20%25%25%20Connexions%0A%20%20%20%20%20%20%20%20S1%20--%3E%20H1%0A%20%20%20%20%20%20%20%20S2%20--%3E%20H1%0A%20%20%20%20%20%20%20%20S2%20--%3E%20H2%0A%20%20%20%20%20%20%20%20S3%20--%3E%20H3%0A%20%20%20%20end%0A%0A%0A%0A%20%20%20%20%25%25%20Styles%0A%20%20%20%20classDef%20program%20fill%3A%23f9f9f9%2Cstroke%3A%23333%2Cstroke-width%3A1px%0A%20%20%20%20classDef%20stack%20fill%3A%23e1f5fe%2Cstroke%3A%232B6087%2Cstroke-width%3A1px%0A%20%20%20%20classDef%20heap%20fill%3A%23ffebe6%2Cstroke%3A%23CC3300%2Cstroke-width%3A1px%0A%20%20%20%20classDef%20code%20fill%3A%234d94ff%2Cstroke%3A%230047b3%2Cstroke-width%3A2px%2Ccolor%3A%23fff%2Cfont-weight%3Abold%0A%20%20%20%20classDef%20memory%20fill%3A%235cd65c%2Cstroke%3A%23267326%2Cstroke-width%3A2px%2Ccolor%3A%23fff%2Cfont-weight%3Abold%0A%20%20%20%20classDef%20heapObj%20fill%3A%23ff9980%2Cstroke%3A%23cc3300%2Cstroke-width%3A2px%2Ccolor%3A%23fff%2Cfont-weight%3Abold%0A%0A%20%20%20%20class%20Programme%20program%0A%20%20%20%20class%20Stack%20stack%0A%20%20%20%20class%20Heap%20heap%0A%20%20%20%20class%20P1%2CP2%2CP3%2CP4%2CP5%2CP6%20code%0A%20%20%20%20class%20S1%2CS2%2CS3%20memory%0A%20%20%20%20class%20H1%2CH2%2CH3%20heapObj%0A"})]),fallback:a(()=>[...s[3]||(s[3]=[e(" Loading... ",-1)])]),_:1})),s[11]||(s[11]=k(`<div class="tip custom-block"><p class="custom-block-title">Points importants à retenir</p><ol><li><p><strong>Types valeur</strong> (int, bool, char, struct...) :</p><ul><li>Passés par valeur : la fonction reçoit une copie, les modifications sont locales</li><li>Passés par référence (ref/out) : la fonction modifie la variable originale</li></ul></li><li><p><strong>Types référence</strong> (tableaux, objets, listes...) :</p><ul><li>Passés par valeur : la fonction reçoit une copie de la référence, mais peut modifier l&#39;objet original</li><li>Passés par référence (ref/out) : la fonction peut changer la référence elle-même</li></ul></li></ol></div><h3 id="quand-utiliser-le-passage-par-reference" tabindex="-1">Quand utiliser le passage par référence ? <a class="header-anchor" href="#quand-utiliser-le-passage-par-reference" aria-label="Permalink to &quot;Quand utiliser le passage par référence ?&quot;">​</a></h3><ul><li>Pour modifier plusieurs valeurs dans une fonction</li><li>Pour éviter la copie de grandes structures de données</li><li>Pour retourner plusieurs valeurs depuis une fonction</li></ul><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalculerStatistiques</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">donnees</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> moyenne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ecartType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    moyenne </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> donnees.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Average</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sommeCarres</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> valeur</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> donnees)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sommeCarres </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Pow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(valeur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moyenne, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ecartType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sommeCarres </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> donnees.Length);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Utilisation:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mesures</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> moy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ecart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalculerStatistiques</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mesures, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moy, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ecart);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Moyenne: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">moy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}, Écart-type: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ecart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h4 id="avec-out" tabindex="-1">Avec out <a class="header-anchor" href="#avec-out" aria-label="Permalink to &quot;Avec out&quot;">​</a></h4><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObtenirDonnees</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> valeur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    valeur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Doit assigner une valeur</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resultat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObtenirDonnees</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resultat);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resultat);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Affiche 42</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Différence entre ref et out</p><ul><li><code>ref</code> : la variable doit être initialisée avant l&#39;appel</li><li><code>out</code> : la variable peut ne pas être initialisée, mais doit recevoir une valeur dans la fonction</li></ul></div><h2 id="parametres-optionnels" tabindex="-1">Paramètres optionnels <a class="header-anchor" href="#parametres-optionnels" aria-label="Permalink to &quot;Paramètres optionnels&quot;">​</a></h2><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> texte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> majuscules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (majuscules)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(texte.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToUpper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(texte);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Utilisation :</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Paramètre optionnel non fourni</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Paramètre optionnel fourni</span></span></code></pre></div><h2 id="surcharge-de-fonction" tabindex="-1">Surcharge de fonction <a class="header-anchor" href="#surcharge-de-fonction" aria-label="Permalink to &quot;Surcharge de fonction&quot;">​</a></h2><p>La <strong>surcharge</strong> permet de définir plusieurs fonctions avec le même nom mais des paramètres différents.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Addition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Addition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Le compilateur choisit automatiquement la bonne fonction selon les types des arguments.</p><h2 id="fonctions-recursives" tabindex="-1">Fonctions récursives <a class="header-anchor" href="#fonctions-recursives" aria-label="Permalink to &quot;Fonctions récursives&quot;">​</a></h2><p>Une fonction <strong>récursive</strong> s&#39;appelle elle-même.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Factorielle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Factorielle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">Attention</p><p>Les fonctions récursives doivent toujours avoir une condition de sortie pour éviter un débordement de pile.</p></div><h2 id="fonctions-anonymes-et-expressions-lambda" tabindex="-1">Fonctions anonymes et expressions lambda <a class="header-anchor" href="#fonctions-anonymes-et-expressions-lambda" aria-label="Permalink to &quot;Fonctions anonymes et expressions lambda&quot;">​</a></h2><p>Les fonctions anonymes et expressions lambda permettent de définir des fonctions sans nom.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Fonction anonyme</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> delegate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b; };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expression lambda équivalente</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Affiche 8</span></span></code></pre></div><h2 id="en-resume" tabindex="-1">En résumé <a class="header-anchor" href="#en-resume" aria-label="Permalink to &quot;En résumé&quot;">​</a></h2><ul><li>Une fonction est une pièce de code qui porte un nom, peut recevoir des paramètres et, parfois, rend une valeur avec <code>return</code>.</li><li>Passer « par valeur », c’est donner une copie; passer « par référence », c’est prêter l’original.</li><li>Les types valeur (int, bool, struct) se comportent différemment des types référence (tableaux, objets): gardez cette différence à l’esprit.</li><li><code>ref</code> et <code>out</code> permettent à une fonction d’influencer des variables définies à l’extérieur: <code>ref</code> nécessite une variable initialisée; <code>out</code> promet de l’initialiser.</li></ul><p>Petite checklist avant d’écrire une fonction</p><ul><li>Ai-je un nom clair qui dit ce que la fonction fait ?</li><li>Quels paramètres sont vraiment nécessaires et de quel type ?</li><li>La fonction doit-elle renvoyer une valeur ? Laquelle ?</li><li>Y a-t-il des effets de bord attendus (modifications d’objets) ? Sont-ils souhaitables et documentés ?</li></ul>`,26))])}const m=r(E,[["render",c]]);export{f as __pageData,m as default};
