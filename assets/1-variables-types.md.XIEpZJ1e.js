import{_ as e,c as i,o as t,a2 as a}from"./chunks/framework.DkJoWC_E.js";const k=JSON.parse('{"title":"Les variables et types de données en C#","description":"","frontmatter":{},"headers":[],"relativePath":"1-variables-types.md","filePath":"1-variables-types.md","lastUpdated":1761314871000}'),n={name:"1-variables-types.md"};function l(r,s,o,p,d,h){return t(),i("div",null,[...s[0]||(s[0]=[a(`<h1 id="les-variables-et-types-de-donnees-en-c" tabindex="-1">Les variables et types de données en C# <a class="header-anchor" href="#les-variables-et-types-de-donnees-en-c" aria-label="Permalink to &quot;Les variables et types de données en C#&quot;">​</a></h1><h2 id="pourquoi-des-variables-et-des-types" tabindex="-1">Pourquoi des variables et des types ? <a class="header-anchor" href="#pourquoi-des-variables-et-des-types" aria-label="Permalink to &quot;Pourquoi des variables et des types ?&quot;">​</a></h2><p>En programmation, une <strong>variable</strong> permet de stocker temporairement une information en mémoire pour pouvoir la manipuler. Le <strong>type</strong> d&#39;une variable précise la nature de cette information (nombre, texte, etc.) et les opérations possibles.</p><blockquote><p><strong>À retenir</strong> : Le choix du type influence la mémoire utilisée et les opérations autorisées.</p></blockquote><hr><h2 id="_1-les-variables-de-type-valeur" tabindex="-1">1. Les variables de type valeur <a class="header-anchor" href="#_1-les-variables-de-type-valeur" aria-label="Permalink to &quot;1. Les variables de type valeur&quot;">​</a></h2><p>Les <strong>types valeur</strong> stockent directement la donnée. Ils sont utilisés pour les informations simples : nombres, caractères, booléens…</p><ul><li><strong>Déclaration</strong> : création de la variable.</li><li><strong>Assignation</strong> : donner une valeur à la variable.</li></ul><p><strong>Exemple</strong> :</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// déclaration + assignation</span></span></code></pre></div><p><strong>Types valeur principaux</strong> : <code>int</code>, <code>byte</code>, <code>short</code>, <code>long</code>, <code>sbyte</code>, <code>ushort</code>, <code>uint</code>, <code>ulong</code>, <code>float</code>, <code>decimal</code>, <code>double</code>, <code>char</code>, <code>bool</code>.</p><blockquote><p><strong>Attention</strong> : Les types valeur contiennent la donnée elle-même, pas une référence.</p></blockquote><p><strong>Pourquoi pas string ?</strong></p><ul><li>Un <code>string</code> est un objet : il contient une référence vers la chaîne de caractères en mémoire, pas la chaîne elle-même.</li></ul><hr><h2 id="_2-les-variables-de-type-reference" tabindex="-1">2. Les variables de type référence <a class="header-anchor" href="#_2-les-variables-de-type-reference" aria-label="Permalink to &quot;2. Les variables de type référence&quot;">​</a></h2><p>Les <strong>types référence</strong> stockent une adresse (référence) vers la donnée réelle, qui se trouve ailleurs en mémoire. C’est le cas des objets, tableaux, chaînes de caractères…</p><ul><li><strong>Exemple</strong> :</li></ul><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nom</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// nom référence la chaîne &quot;Alice&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">notes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// notes référence un tableau d&#39;entiers</span></span></code></pre></div><p><strong>Types référence principaux</strong> : <code>string</code>, tout ce qui est créé avec <code>new</code> (tableaux, listes, objets personnalisés…)</p><blockquote><p><strong>Astuce</strong> : En programmation orientée objet, on manipule surtout des types référence.</p></blockquote><hr><h2 id="_3-tableaux-des-principaux-types-c" tabindex="-1">3. Tableaux des principaux types C# <a class="header-anchor" href="#_3-tableaux-des-principaux-types-c" aria-label="Permalink to &quot;3. Tableaux des principaux types C#&quot;">​</a></h2><h3 id="types-numeriques-entiers" tabindex="-1">Types numériques entiers <a class="header-anchor" href="#types-numeriques-entiers" aria-label="Permalink to &quot;Types numériques entiers&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Alias C#</th><th>Plage de valeurs</th><th>Taille</th></tr></thead><tbody><tr><td>byte</td><td>0 à 255</td><td>1 octet</td></tr><tr><td>sbyte</td><td>-128 à 127</td><td>1 octet</td></tr><tr><td>short</td><td>-32 768 à 32 767</td><td>2 octets</td></tr><tr><td>ushort</td><td>0 à 65 535</td><td>2 octets</td></tr><tr><td>int</td><td>-2 147 483 648 à 2 147 483 647</td><td>4 octets</td></tr><tr><td>uint</td><td>0 à 4 294 967 295</td><td>4 octets</td></tr><tr><td>long</td><td>-9 223 372 036 854 775 808 à 9 223 372 036 854 775 807</td><td>8 octets</td></tr><tr><td>ulong</td><td>0 à 18 446 744 073 709 551 615</td><td>8 octets</td></tr></tbody></table><h3 id="types-numeriques-a-virgule-flottante" tabindex="-1">Types numériques à virgule flottante <a class="header-anchor" href="#types-numeriques-a-virgule-flottante" aria-label="Permalink to &quot;Types numériques à virgule flottante&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Alias C#</th><th>Taille</th><th>Précision</th><th>Plage de valeurs</th></tr></thead><tbody><tr><td>float</td><td>4 octets</td><td>7 chiffres</td><td>±1,5×10⁻⁴⁵ à ±3,4×10³⁸</td></tr><tr><td>double</td><td>8 octets</td><td>15-16 chiffres</td><td>±5,0×10⁻³²⁴ à ±1,7×10³⁰⁸</td></tr><tr><td>decimal</td><td>16 octets</td><td>28-29 décimales</td><td>±1,0×10⁻²⁸ à ±7,9×10²⁸</td></tr></tbody></table><blockquote><p><strong>A noter</strong> :</p><ul><li>Utilisez <code>int</code> pour les entiers courants, <code>double</code> pour les réels, <code>decimal</code> pour les calculs financiers.</li><li><code>float</code> et <code>double</code> sont sujets à des imprécisions d&#39;arrondi.</li></ul></blockquote><h3 id="autres-types" tabindex="-1">Autres types <a class="header-anchor" href="#autres-types" aria-label="Permalink to &quot;Autres types&quot;">​</a></h3><ul><li><code>char</code> : un caractère Unicode (16 bits)</li><li><code>bool</code> : vrai ou faux</li></ul><div class="info custom-block"><p class="custom-block-title">Bit et Byte</p><ul><li>Un <strong>byte</strong> (ou octet) = 8 bits.</li><li>Un <strong>bit</strong> vaut 0 ou 1.</li><li>Un <strong>char</strong> = 16 bits (Unicode).</li><li>Une constante entière est par défaut de type <code>int</code>, une constante réelle de type <code>double</code>.</li></ul></div><hr><h2 id="_4-la-portee-visibilite-des-variables" tabindex="-1">4. La portée (visibilité) des variables <a class="header-anchor" href="#_4-la-portee-visibilite-des-variables" aria-label="Permalink to &quot;4. La portée (visibilité) des variables&quot;">​</a></h2><p>La <strong>portée</strong> d&#39;une variable détermine où elle est accessible dans le code.</p><ul><li>Une variable déclarée dans un bloc (<code>{ ... }</code>) n&#39;est visible que dans ce bloc.</li></ul><p><strong>Exemple d&#39;erreur de portée</strong> :</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Erreur : i n&#39;existe plus ici</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Exemple correct</strong> :</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nombre</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nombre); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><strong>Schéma</strong> :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{ // début du bloc</span></span>
<span class="line"><span>    int x = 5;</span></span>
<span class="line"><span>    // x est accessible ici</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>// x n&#39;est plus accessible ici</span></span></code></pre></div></blockquote><hr><h2 id="_5-methodes-d-assemblage-de-chaines-de-caracteres-strings" tabindex="-1">5. Méthodes d&#39;assemblage de chaînes de caractères (strings) <a class="header-anchor" href="#_5-methodes-d-assemblage-de-chaines-de-caracteres-strings" aria-label="Permalink to &quot;5. Méthodes d&#39;assemblage de chaînes de caractères (strings)&quot;">​</a></h2><p>Assembler des chaînes est très courant. Voici les principales méthodes :</p><ul><li><p><strong>Concaténation</strong> (avec +) :</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span></code></pre></div><blockquote><p>Simple, mais peu lisible si beaucoup de variables.</p></blockquote></li><li><p><strong>Interpolation</strong> (recommandée) :</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $&quot;Hello {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><blockquote><p>Lisible, moderne, à privilégier.</p></blockquote></li><li><p><strong>Formatage de chaîne</strong> :</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello {0}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name);</span></span></code></pre></div><blockquote><p>Utile pour afficher plusieurs variables.</p></blockquote></li></ul><div class="warning custom-block"><p class="custom-block-title">À savoir</p><ul><li><code>Console.WriteLine(&quot;Hello {0}&quot;, name)</code> fonctionne uniquement avec <code>Console.WriteLine</code>.</li><li>Pour créer une chaîne formatée sans afficher : <code>string.Format(&quot;Hello {0}&quot;, name)</code></li></ul></div><hr><h2 id="_6-resume-visuel" tabindex="-1">6. Résumé visuel <a class="header-anchor" href="#_6-resume-visuel" aria-label="Permalink to &quot;6. Résumé visuel&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Type</th><th>Stocke...</th><th>Exemples</th></tr></thead><tbody><tr><td>Valeur</td><td>la donnée elle-même</td><td>int, double, bool, ...</td></tr><tr><td>Référence</td><td>une adresse mémoire</td><td>string, tableau, ...</td></tr></tbody></table><blockquote><p><strong>À retenir</strong> :</p><ul><li>Toujours choisir le type le plus adapté à l&#39;information à stocker.</li><li>Bien comprendre la portée pour éviter les erreurs.</li><li>Privilégier l&#39;interpolation pour assembler des chaînes.</li></ul></blockquote>`,49)])])}const u=e(n,[["render",l]]);export{k as __pageData,u as default};
